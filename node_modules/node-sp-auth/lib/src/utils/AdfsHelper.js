"use strict";
var request = require('request-promise');
var url = require('url');
var _ = require('lodash');
var fs = require('fs');
var path = require('path');
var xmldoc = require('xmldoc');
var AdfsHelper = (function () {
    function AdfsHelper() {
    }
    AdfsHelper.getSamlAssertion = function (siteUrl, credentials) {
        var adfsHost = url.parse(credentials.adfsUrl).host;
        var usernameMixedUrl = "https://" + adfsHost + "/adfs/services/trust/13/usernamemixed";
        var samlTemplate = fs.readFileSync(path.join(__dirname, '..', '..', '..', 'templates', 'adfs_saml_wsfed.tmpl'));
        var samlBody = _.template(samlTemplate.toString())({
            to: usernameMixedUrl,
            username: credentials.username,
            password: credentials.password,
            relyingParty: credentials.relyingParty
        });
        return request.post(usernameMixedUrl, {
            body: samlBody,
            strictSSL: false,
            simple: false,
            headers: {
                'Content-Length': samlBody.length,
                'Content-Type': 'application/soap+xml; charset=utf-8'
            }
        })
            .then(function (xmlResponse) {
            var doc = new xmldoc.XmlDocument(xmlResponse);
            var tokenResponseCollection = doc.childNamed('s:Body').firstChild;
            if (tokenResponseCollection.name.indexOf('Fault') !== -1) {
                throw new Error(tokenResponseCollection.toString());
            }
            var responseNamespace = tokenResponseCollection.name.split(':')[0];
            var securityTokenResponse = doc.childNamed('s:Body').firstChild.firstChild;
            var samlAssertion = securityTokenResponse.childNamed(responseNamespace + ':RequestedSecurityToken').firstChild;
            var notBefore = samlAssertion.firstChild.attr['NotBefore'];
            var notAfter = samlAssertion.firstChild.attr['NotOnOrAfter'];
            return {
                value: samlAssertion.toString({ compressed: true }),
                notAfter: notAfter,
                notBefore: notBefore
            };
        });
    };
    return AdfsHelper;
}());
exports.AdfsHelper = AdfsHelper;
