"use strict";
var Promise = require('bluebird');
var url = require('url');
var util = require('util');
var _ = require('lodash');
var fs = require('fs');
var request = require('request-promise');
var cookie = require('cookie');
var path = require('path');
var xmldoc = require('xmldoc');
var Cache_1 = require('./../../utils/Cache');
var consts = require('./../../Consts');
var AdfsHelper_1 = require('./../../utils/AdfsHelper');
var OnlineUserCredentials = (function () {
    function OnlineUserCredentials(_siteUrl, _authOptions) {
        this._siteUrl = _siteUrl;
        this._authOptions = _authOptions;
        this._authOptions = _.extend({}, _authOptions);
        this._authOptions.username = this._authOptions.username
            .replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&apos;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
        this._authOptions.password = this._authOptions.password
            .replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&apos;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
    }
    OnlineUserCredentials.prototype.getAuth = function () {
        var _this = this;
        var parsedUrl = url.parse(this._siteUrl);
        var host = parsedUrl.host;
        var cacheKey = util.format('%s@%s', host, this._authOptions.username);
        var cachedCookie = OnlineUserCredentials.CookieCache.get(cacheKey);
        if (cachedCookie) {
            return Promise.resolve({
                headers: {
                    'Cookie': cachedCookie
                }
            });
        }
        return this.getSecurityToken()
            .then(function (xmlResponse) {
            return _this.postToken(xmlResponse);
        })
            .then(function (data) {
            var response = data[1];
            var diffSeconds = data[0];
            var fedAuth, rtFa;
            for (var i = 0; i < response.headers['set-cookie'].length; i++) {
                var headerCookie = response.headers['set-cookie'][i];
                if (headerCookie.indexOf(consts.FedAuth) !== -1) {
                    fedAuth = cookie.parse(headerCookie)[consts.FedAuth];
                }
                if (headerCookie.indexOf(consts.RtFa) !== -1) {
                    rtFa = cookie.parse(headerCookie)[consts.RtFa];
                }
            }
            var authCookie = 'FedAuth=' + fedAuth + '; rtFa=' + rtFa;
            OnlineUserCredentials.CookieCache.set(cacheKey, authCookie, diffSeconds);
            return {
                headers: {
                    'Cookie': authCookie
                }
            };
        });
    };
    ;
    OnlineUserCredentials.prototype.getSecurityToken = function () {
        var _this = this;
        return request.post(consts.OnlineUserRealmEndpoint, {
            simple: false,
            strictSSL: false,
            json: true,
            form: {
                'login': this._authOptions.username
            }
        })
            .then(function (userRealm) {
            var authType = userRealm.NameSpaceType;
            if (!authType) {
                throw new Error('Unable to define namespace type for Online authentiation');
            }
            if (authType === 'Managed') {
                return _this.getSecurityTokenWithOnline();
            }
            if (authType === 'Federated') {
                return _this.getSecurityTokenWithAdfs(userRealm.AuthURL);
            }
            throw new Error("Unable to resolve namespace authentiation type. Type received: " + authType);
        });
    };
    OnlineUserCredentials.prototype.getSecurityTokenWithAdfs = function (adfsUrl) {
        var _this = this;
        return AdfsHelper_1.AdfsHelper.getSamlAssertion(this._siteUrl, {
            username: this._authOptions.username,
            password: this._authOptions.password,
            adfsUrl: adfsUrl,
            relyingParty: consts.AdfsOnlineRealm
        })
            .then(function (samlAssertion) {
            var siteUrlParsed = url.parse(_this._siteUrl);
            var rootSiteUrl = siteUrlParsed.protocol + '//' + siteUrlParsed.host;
            var tokenRequest = _.template(fs.readFileSync(path.join(__dirname, '..', '..', '..', '..', 'templates', 'online_saml_wsfed_adfs.tmpl')).toString())({
                endpoint: rootSiteUrl,
                token: samlAssertion.value
            });
            return request.post(consts.MSOnlineSts, {
                body: tokenRequest,
                headers: {
                    'Content-Length': tokenRequest.length,
                    'Content-Type': 'application/soap+xml; charset=utf-8'
                },
                simple: false,
                strictSSL: false
            });
        });
    };
    OnlineUserCredentials.prototype.getSecurityTokenWithOnline = function () {
        var parsedUrl = url.parse(this._siteUrl);
        var host = parsedUrl.host;
        var spFormsEndPoint = parsedUrl.protocol + "//" + host + "/" + consts.FormsPath;
        var samlBody = _.template(fs.readFileSync(path.join(__dirname, '..', '..', '..', '..', 'templates', 'online_saml_wsfed.tmpl')).toString())({
            username: this._authOptions.username,
            password: this._authOptions.password,
            endpoint: spFormsEndPoint
        });
        return request
            .post(consts.MSOnlineSts, {
            body: samlBody,
            simple: false,
            strictSSL: false,
            headers: {
                'Content-Type': 'application/soap+xml; charset=utf-8'
            }
        })
            .then(function (xmlResponse) {
            return xmlResponse;
        });
    };
    OnlineUserCredentials.prototype.postToken = function (xmlResponse) {
        var xmlDoc = new xmldoc.XmlDocument(xmlResponse);
        var parsedUrl = url.parse(this._siteUrl);
        var spFormsEndPoint = parsedUrl.protocol + "//" + parsedUrl.host + "/" + consts.FormsPath;
        var securityTokenResponse = xmlDoc.childNamed('S:Body').firstChild;
        if (securityTokenResponse.name.indexOf('Fault') !== -1) {
            throw new Error(securityTokenResponse.toString());
        }
        var binaryToken = securityTokenResponse.childNamed('wst:RequestedSecurityToken').firstChild.val;
        var now = new Date().getTime();
        var expires = new Date(securityTokenResponse.childNamed('wst:Lifetime').childNamed('wsu:Expires').val).getTime();
        var diff = (expires - now) / 1000;
        var diffSeconds = parseInt(diff.toString(), 10);
        return Promise.all([diffSeconds, request
                .post(spFormsEndPoint, {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)',
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: binaryToken,
                rejectUnauthorized: false,
                resolveWithFullResponse: true,
                simple: false
            })]);
    };
    OnlineUserCredentials.CookieCache = new Cache_1.Cache();
    return OnlineUserCredentials;
}());
exports.OnlineUserCredentials = OnlineUserCredentials;
