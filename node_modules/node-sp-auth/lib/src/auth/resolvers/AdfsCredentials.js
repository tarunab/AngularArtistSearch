"use strict";
var Promise = require('bluebird');
var request = require('request-promise');
var url = require('url');
var _ = require('lodash');
var fs = require('fs');
var path = require('path');
var cookie = require('cookie');
var util = require('util');
var xmldoc = require('xmldoc');
var Cache_1 = require('./../../utils/Cache');
var consts = require('./../../Consts');
var AdfsHelper_1 = require('./../../utils/AdfsHelper');
var AdfsCredentials = (function () {
    function AdfsCredentials(_siteUrl, _authOptions) {
        this._siteUrl = _siteUrl;
        this._authOptions = _.extend({}, _authOptions);
        this._authOptions.username = this._authOptions.username
            .replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&apos;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
        this._authOptions.password = this._authOptions.password
            .replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&apos;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
        if (this._authOptions.domain !== undefined) {
            this._authOptions.username = this._authOptions.domain + "\\" + this._authOptions.username;
        }
    }
    AdfsCredentials.prototype.getAuth = function () {
        var _this = this;
        var siteUrlParsed = url.parse(this._siteUrl);
        var cacheKey = util.format('%s@%s', siteUrlParsed.host, this._authOptions.username);
        var cachedCookie = AdfsCredentials.CookieCache.get(cacheKey);
        if (cachedCookie) {
            return Promise.resolve({
                headers: {
                    'Cookie': cachedCookie
                }
            });
        }
        return AdfsHelper_1.AdfsHelper.getSamlAssertion(this._siteUrl, this._authOptions)
            .then(function (data) {
            return _this.postTokenData(data);
        })
            .then(function (data) {
            var adfsCookie = _this._authOptions.adfsCookie || consts.FedAuth;
            var notAfter = new Date(data[0]).getTime();
            var expiresIn = parseInt(((notAfter - new Date().getTime()) / 1000).toString(), 10);
            var response = data[1];
            var authCookie = adfsCookie + '=' + cookie.parse(response.headers['set-cookie'][0])[adfsCookie];
            AdfsCredentials.CookieCache.set(cacheKey, authCookie, expiresIn);
            return {
                headers: {
                    'Cookie': authCookie
                }
            };
        });
    };
    AdfsCredentials.prototype.postTokenData = function (samlAssertion) {
        var tokenPostTemplate = fs.readFileSync(path.join(__dirname, '..', '..', '..', '..', 'templates', 'adfs_saml_token.tmpl'));
        var result = _.template(tokenPostTemplate.toString())({
            created: samlAssertion.notBefore,
            expires: samlAssertion.notAfter,
            relyingParty: this._authOptions.relyingParty,
            token: samlAssertion.value
        });
        var tokenXmlDoc = new xmldoc.XmlDocument(result);
        var siteUrlParsed = url.parse(this._siteUrl);
        var rootSiteUrl = siteUrlParsed.protocol + "//" + siteUrlParsed.host;
        return Promise.all([samlAssertion.notAfter, request.post(rootSiteUrl + "/_trust/", {
                form: {
                    'wa': 'wsignin1.0',
                    'wctx': rootSiteUrl + "/_layouts/Authenticate.aspx?Source=%2F",
                    'wresult': tokenXmlDoc.toString({ compressed: true })
                },
                resolveWithFullResponse: true,
                simple: false,
                strictSSL: false
            })]);
    };
    AdfsCredentials.CookieCache = new Cache_1.Cache();
    return AdfsCredentials;
}());
exports.AdfsCredentials = AdfsCredentials;
