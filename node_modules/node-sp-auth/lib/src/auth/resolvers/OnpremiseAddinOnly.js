"use strict";
var Promise = require('bluebird');
var jwt = require('jsonwebtoken');
var fs = require('fs');
var url = require('url');
var Cache_1 = require('./../../utils/Cache');
var consts = require('./../../Consts');
var OnpremiseAddinOnly = (function () {
    function OnpremiseAddinOnly(_siteUrl, _authOptions) {
        this._siteUrl = _siteUrl;
        this._authOptions = _authOptions;
    }
    OnpremiseAddinOnly.prototype.getAuth = function () {
        var sharepointhostname = url.parse(this._siteUrl).host;
        var audience = consts.SharePointServicePrincipal + "/" + sharepointhostname + "@" + this._authOptions.realm;
        var fullIssuerIdentifier = this._authOptions.issuerId + "@" + this._authOptions.realm;
        var options = {
            key: fs.readFileSync(this._authOptions.rsaPrivateKeyPath)
        };
        var dateref = parseInt(((new Date()).getTime() / 1000).toString(), 10);
        var rs256 = {
            typ: 'JWT',
            alg: 'RS256',
            x5t: this._authOptions.shaThumbprint
        };
        var actortoken = {
            aud: audience,
            iss: fullIssuerIdentifier,
            nameid: this._authOptions.clientId + '@' + this._authOptions.realm,
            nbf: (dateref - consts.HighTrustTokenLifeTime).toString(),
            exp: (dateref + consts.HighTrustTokenLifeTime).toString(),
            trustedfordelegation: true
        };
        var cacheKey = actortoken.nameid;
        var cachedToken = OnpremiseAddinOnly.TokenCache.get(cacheKey);
        var accessToken;
        if (cachedToken) {
            accessToken = cachedToken;
        }
        else {
            accessToken = jwt.sign(actortoken, options.key, { header: rs256 });
            OnpremiseAddinOnly.TokenCache.set(cacheKey, accessToken, consts.HighTrustTokenLifeTime - 60);
        }
        return Promise.resolve({
            headers: {
                'Authorization': "Bearer " + accessToken
            }
        });
    };
    ;
    OnpremiseAddinOnly.TokenCache = new Cache_1.Cache();
    return OnpremiseAddinOnly;
}());
exports.OnpremiseAddinOnly = OnpremiseAddinOnly;
