"use strict";
var Promise = require('bluebird');
var _ = require('lodash');
var util = require('util');
var fs = require('fs');
var path = require('path');
var url = require('url');
var request = require('request-promise');
var cookie = require('cookie');
var xmldoc = require('xmldoc');
var Cache_1 = require('./../../utils/Cache');
var consts = require('./../../Consts');
var OnpremiseFbaCredentials = (function () {
    function OnpremiseFbaCredentials(_siteUrl, _authOptions) {
        this._siteUrl = _siteUrl;
        this._authOptions = _authOptions;
    }
    OnpremiseFbaCredentials.prototype.getAuth = function () {
        var parsedUrl = url.parse(this._siteUrl);
        var host = parsedUrl.host;
        var cacheKey = util.format('%s@%s', host, this._authOptions.username);
        var cachedCookie = OnpremiseFbaCredentials.CookieCache.get(cacheKey);
        if (cachedCookie) {
            return Promise.resolve({
                headers: {
                    'Cookie': cachedCookie
                }
            });
        }
        var soapBody = _.template(fs.readFileSync(path.join(__dirname, '..', '..', '..', '..', 'templates', 'fba_login_wsfed.tmpl')).toString())({
            username: this._authOptions.username,
            password: this._authOptions.password
        });
        var fbaEndPoint = parsedUrl.protocol + "//" + host + "/" + consts.FbaAuthEndpoint;
        return request({
            url: fbaEndPoint,
            method: 'POST',
            headers: {
                'Content-Type': 'text/xml; charset=utf-8',
                'Content-Length': soapBody.length
            },
            body: soapBody,
            json: false,
            simple: false,
            strictSSL: false,
            transform: function (body, response, resolveWithFullResponse) {
                return response;
            }
        })
            .then(function (response) {
            var xmlDoc = new xmldoc.XmlDocument(response.body);
            if (xmlDoc.name === 'm:error') {
                var errorCode_1 = xmlDoc.childNamed('m:code').val;
                var errorMessage = xmlDoc.childNamed('m:message').val;
                throw new Error(errorCode_1 + ", " + errorMessage);
            }
            var errorCode = xmlDoc.childNamed('soap:Body').childNamed('LoginResponse').childNamed('LoginResult').childNamed('ErrorCode').val;
            var cookieName = xmlDoc.childNamed('soap:Body').childNamed('LoginResponse').childNamed('LoginResult').childNamed('CookieName').val;
            var diffSeconds = parseInt(xmlDoc.childNamed('soap:Body').childNamed('LoginResponse').childNamed('LoginResult').childNamed('TimeoutSeconds').val, null);
            var cookieValue;
            if (errorCode === 'PasswordNotMatch') {
                throw new Error("Password doesn't not match");
            }
            if (errorCode !== 'NoError') {
                throw new Error(errorCode);
            }
            (response.headers['set-cookie'] || []).forEach(function (headerCookie) {
                if (headerCookie.indexOf(cookieName) !== -1) {
                    cookieValue = cookie.parse(headerCookie)[cookieName];
                }
            });
            var authCookie = cookieName + "=" + cookieValue;
            OnpremiseFbaCredentials.CookieCache.set(cacheKey, authCookie, diffSeconds);
            return {
                headers: {
                    'Cookie': authCookie
                }
            };
        });
    };
    ;
    OnpremiseFbaCredentials.CookieCache = new Cache_1.Cache();
    return OnpremiseFbaCredentials;
}());
exports.OnpremiseFbaCredentials = OnpremiseFbaCredentials;
