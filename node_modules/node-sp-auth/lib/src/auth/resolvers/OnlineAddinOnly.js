"use strict";
var Promise = require('bluebird');
var request = require('request-promise');
var url = require('url');
var Cache_1 = require('./../../utils/Cache');
var UrlHelper_1 = require('./../../utils/UrlHelper');
var consts = require('./../../Consts');
var OnlineAddinOnly = (function () {
    function OnlineAddinOnly(_siteUrl, _authOptions) {
        this._siteUrl = _siteUrl;
        this._authOptions = _authOptions;
    }
    OnlineAddinOnly.prototype.getAuth = function () {
        var _this = this;
        var sharepointhostname = url.parse(this._siteUrl).hostname;
        var cacheKey = this._authOptions.clientSecret;
        var cachedToken = OnlineAddinOnly.TokenCache.get(cacheKey);
        if (cachedToken) {
            return Promise.resolve({
                headers: {
                    'Authorization': "Bearer " + cachedToken
                }
            });
        }
        return this.getRealm(this._siteUrl)
            .then(function (realm) {
            return Promise.all([realm, _this.getAuthUrl(realm)]);
        })
            .then(function (data) {
            var realm = data[0];
            var authUrl = data[1];
            var resource = consts.SharePointServicePrincipal + "/" + sharepointhostname + "@" + realm;
            var fullClientId = _this._authOptions.clientId + "@" + realm;
            return request.post(authUrl, {
                json: true,
                form: {
                    'grant_type': 'client_credentials',
                    'client_id': fullClientId,
                    'client_secret': _this._authOptions.clientSecret,
                    'resource': resource
                }
            });
        })
            .then(function (data) {
            var expiration = parseInt(data.expires_in, 10);
            OnlineAddinOnly.TokenCache.set(cacheKey, data.access_token, expiration - 60);
            return {
                headers: {
                    'Authorization': "Bearer " + data.access_token
                }
            };
        });
    };
    ;
    OnlineAddinOnly.prototype.getAuthUrl = function (realm) {
        return new Promise(function (resolve, reject) {
            var url = "https://accounts.accesscontrol.windows.net/metadata/json/1?realm=" + realm;
            request.get(url, { json: true })
                .then(function (data) {
                for (var i = 0; i < data.endpoints.length; i++) {
                    if (data.endpoints[i].protocol === 'OAuth2') {
                        resolve(data.endpoints[i].location);
                        return;
                    }
                }
            });
        });
    };
    OnlineAddinOnly.prototype.getRealm = function (siteUrl) {
        if (this._authOptions.realm) {
            return Promise.resolve(this._authOptions.realm);
        }
        return request.post(UrlHelper_1.UrlHelper.removeTrailingSlash(siteUrl) + "/vti_bin/client.svc", {
            method: 'POST',
            headers: {
                'Authorization': 'Bearer '
            },
            resolveWithFullResponse: true,
            simple: false
        })
            .then(function (data) {
            var header = data.headers['www-authenticate'];
            var index = header.indexOf('Bearer realm="');
            return header.substring(index + 14, index + 50);
        });
    };
    OnlineAddinOnly.TokenCache = new Cache_1.Cache();
    return OnlineAddinOnly;
}());
exports.OnlineAddinOnly = OnlineAddinOnly;
