export interface IBasicOAuthOption {
    clientId: string;
}
export interface IOnlineAddinCredentials extends IBasicOAuthOption {
    clientSecret: string;
    realm?: string;
}
export interface IOnPremiseAddinCredentials extends IBasicOAuthOption {
    realm: string;
    issuerId: string;
    rsaPrivateKeyPath: string;
    shaThumbprint: string;
}
export interface IUserCredentials {
    username: string;
    password: string;
}
export interface IOnpremiseFbaCredentials extends IUserCredentials {
    fba: boolean;
}
export interface IOnpremiseUserCredentials extends IUserCredentials {
    domain?: string;
    workstation?: string;
}
export interface IAdfsUserCredentials extends IUserCredentials {
    domain?: string;
    adfsCookie?: string;
    adfsUrl: string;
    relyingParty: string;
}
export declare type IAuthOptions = IOnlineAddinCredentials | IOnPremiseAddinCredentials | IUserCredentials | IOnpremiseUserCredentials | IAdfsUserCredentials;
export declare function isAddinOnlyOnline(T: IAuthOptions): T is IOnlineAddinCredentials;
export declare function isAddinOnlyOnpremise(T: IAuthOptions): T is IOnPremiseAddinCredentials;
export declare function isUserCredentialsOnline(siteUrl: string, T: IAuthOptions): T is IUserCredentials;
export declare function isUserCredentialsOnpremise(siteUrl: string, T: IAuthOptions): T is IOnpremiseUserCredentials;
export declare function isFbaCredentialsOnpremise(siteUrl: string, T: IAuthOptions): T is IOnpremiseFbaCredentials;
export declare function isAdfsCredentials(T: IAuthOptions): T is IAdfsUserCredentials;
